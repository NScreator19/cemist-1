# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RqF-dfKWWd-l_kJnnaMro7QmDsh2vCvx
"""

import streamlit as st
import pandas as pd

st.title("CEMIST - Cement Emission Simulation and Tracking")

# --- Data Awal
data = {
    "Cement type": [
        "NAR1 PCC (Transisi)", "NAR1 OPC", "NAR1 OPC - SG", "NAR1 RFP", "NAR1 OWC", "NAR1 Type V", "NAR1 PwrPro",
        "NAR2 PCC Regular", "NAR2 RFP", "NAR2 PwrPro",
        "CIL PCC",
        "TQ1 PCC (Transisi)", "TQ1 OPC - SG", "TQ1 RFP", "TQ1 Type V",
        "TQ2 PCC Regular", "TQ2 Type V", "TQ2 RFP", "TQ2 OPC", "TQ2 PCC (Transisi)",
        "LHO PCC Regular", "LHO OPC"
    ],
    "Clinker Consumption (ton)": [
        82808, 192961, 571231, 1050785, 48943, 20070, 124720,
        1469132, 45949, 0,
        1440053,
        79722, 0, 226564, 363551,
        487608, 0, 226564, 305894, 0,
        640132, 283590
    ],
    "Cement Production (ton)": [
        93568, 203975, 649126, 1203648, 50770, 21581, 178172,
        2532986, 50428, 0,
        2482850,
        94029, 0, 260539, 380682,
        777580, 0, 260539, 338676, 0,
        1094242, 331684
    ]
}

# --- DataFrame
df = pd.DataFrame(data)
df["Clinker Factor (%)"] = (df["Clinker Consumption (ton)"] / df["Cement Production (ton)"]) * 100
df = df.fillna(0)

# --- Tampilan awal
total_clinker_awal = df["Clinker Consumption (ton)"].sum()
total_cement = df["Cement Production (ton)"].sum()
cf_awal = total_clinker_awal / total_cement * 100
st.write(f"**Clinker Factor Konsolidasi Awal: {cf_awal:.2f}%**")

# --- Input tipe semen yang ingin diubah CF-nya
semen_dipilih = st.multiselect(
    "üîß Pilih tipe semen yang ingin diubah nilai Clinker Factor-nya:",
    df["Cement type"].tolist()
)

cf_baru_dict = {}
if semen_dipilih:
    st.subheader("‚úèÔ∏è Masukkan Clinker Factor Baru untuk Setiap Tipe Semen:")
    for semen in semen_dipilih:
        default_val = float(df[df["Cement type"] == semen]["Clinker Factor (%)"])
        cf_input = st.number_input(f"{semen} (CF Baru %):", min_value=0.0, max_value=100.0, value=round(default_val, 2))
        cf_baru_dict[semen] = cf_input

# --- Proses Simulasi
if cf_baru_dict:
    df_result = df.copy()
    for semen, cf_new in cf_baru_dict.items():
        idx = df_result[df_result["Cement type"] == semen].index[0]
        prod = df_result.loc[idx, "Cement Production (ton)"]
        df_result.at[idx, "Clinker Factor (%)"] = cf_new
        df_result.at[idx, "Clinker Consumption (ton)"] = prod * cf_new / 100

    total_clinker_baru = df_result["Clinker Consumption (ton)"].sum()
    cf_konsolidasi_baru = total_clinker_baru / total_cement * 100

    # --- Tampilkan tabel sebelum dan sesudah (khusus semen yang diubah)
    st.subheader("üìã Kondisi Sebelum")
    df_sebelum = df[df["Cement type"].isin(semen_dipilih)][[
        "Cement type", "Cement Production (ton)", "Clinker Consumption (ton)", "Clinker Factor (%)"
    ]]
    st.dataframe(df_sebelum.style.format({
        "Clinker Factor (%)": "{:.2f}",
        "Clinker Consumption (ton)": "{:,.0f}"
    }))

    st.subheader("üìä Kondisi Setelah")
    df_sesudah = df_result[df_result["Cement type"].isin(semen_dipilih)][[
        "Cement type", "Cement Production (ton)", "Clinker Consumption (ton)", "Clinker Factor (%)"
    ]]
    st.dataframe(df_sesudah.style.format({
        "Clinker Factor (%)": "{:.2f}",
        "Clinker Consumption (ton)": "{:,.0f}"
    }))

    # --- Tampilkan CF Konsolidasi Baru
    st.subheader("üìà Ringkasan")
    st.write(f"**Clinker Factor Konsolidasi Setelah Simulasi: {cf_konsolidasi_baru:.2f}%**")
    st.dataframe(df_result.style.format({
        "Clinker Factor (%)": "{:.2f}",
        "Clinker Consumption (ton)": "{:,.0f}"
    }))