# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qLzdSzpNef4NFeOy3alX23PNxBiOOsso
"""

import streamlit as st
import pandas as pd

st.set_page_config(page_title="Simulasi Clinker Factor", layout="centered")
st.title("Simulasi Clinker Factor Konsolidasi dan Per Tipe Semen")

# --- Data Awal
data = {
    "Cement type": [
        "NAR1 PCC (Transisi)", "NAR1 OPC", "NAR1 OPC - SG", "NAR1 RFP", "NAR1 OWC", "NAR1 Type V", "NAR1 PwrPro",
        "NAR2 PCC Regular", "NAR2 RFP", "NAR2 PwrPro", "CIL PCC",
        "TQ1 PCC (Transisi)", "TQ1 OPC - SG", "TQ1 RFP", "TQ1 Type V",
        "TQ2 PCC Regular", "TQ2 Type V", "TQ2 RFP", "TQ2 OPC", "TQ2 PCC (Transisi)",
        "LHO PCC Regular", "LHO OPC"
    ],
    "Clinker Consumption (ton)": [
        82808, 192961, 571231, 1050785, 48943, 20070, 124720,
        1469132, 45949, 0, 1440053,
        79722, 0, 226564, 363551,
        487608, 0, 226564, 305894, 0,
        640132, 283590
    ],
    "Cement Production (ton)": [
        93568, 203975, 649126, 1203648, 50770, 21581, 178172,
        2532986, 50428, 0, 2482850,
        94029, 0, 260539, 380682,
        777580, 0, 260539, 338676, 0,
        1094242, 331684
    ]
}

df = pd.DataFrame(data)
df["Clinker Factor (%)"] = (df["Clinker Consumption (ton)"] / df["Cement Production (ton)"]) * 100
df = df.fillna(0)

total_cement = df["Cement Production (ton)"].sum()
total_clinker_awal = df["Clinker Consumption (ton)"].sum()
cf_awal = total_clinker_awal / total_cement * 100

st.write(f"**Clinker Factor Konsolidasi Awal: {cf_awal:.2f}%**")

# --- Mode Simulasi
mode = st.radio("Pilih Mode Simulasi:", ["Ubah CF Konsolidasi", "Ubah CF per Tipe Semen"])

if mode == "Ubah CF Konsolidasi":
    target_cf = st.number_input("Masukkan target Clinker Factor Konsolidasi (%)", min_value=0.0, max_value=100.0, value=round(cf_awal, 2))
    semen_dipilih = st.multiselect("Pilih tipe semen yang akan disesuaikan Clinker Consumption-nya:", df["Cement type"].tolist())

    if semen_dipilih:
        if len(semen_dipilih) < 2:
            st.error("❌ Pilih minimal 2 tipe semen untuk menyesuaikan Clinker Consumption.")
        else:
            df_new = df.copy()

            # Semen tidak dipilih (tetap)
            df_tetap = df_new[~df_new["Cement type"].isin(semen_dipilih)]
            clinker_tetap = df_tetap["Clinker Consumption (ton)"].sum()

            # Semen dipilih (akan diubah)
            df_ubah = df_new[df_new["Cement type"].isin(semen_dipilih)].copy()
            total_prod_ubah = df_ubah["Cement Production (ton)"].sum()

            # Hitung total clinker sesuai target CF
            clinker_total_target = (target_cf / 100) * total_cement
            clinker_ubah_total = clinker_total_target - clinker_tetap

            # Distribusi clinker baru
            for idx in df_ubah.index:
                prod = df_ubah.at[idx, "Cement Production (ton)"]
                clinker_baru = clinker_ubah_total * (prod / total_prod_ubah)
                df_new.at[idx, "Clinker Consumption (ton)"] = clinker_baru
                df_new.at[idx, "Clinker Factor (%)"] = clinker_baru / prod * 100

            # CF Konsolidasi baru
            cf_konsolidasi_baru = df_new["Clinker Consumption (ton)"].sum() / total_cement * 100

            st.subheader("📋 Kondisi Sebelum")
            st.dataframe(df[df["Cement type"].isin(semen_dipilih)])

            st.subheader("📊 Kondisi Setelah")
            st.dataframe(df_new[df_new["Cement type"].isin(semen_dipilih)])

            st.success(f"✅ **CF Konsolidasi Setelah Simulasi: {cf_konsolidasi_baru:.2f}%**")

elif mode == "Ubah CF per Tipe Semen":
    semen_dipilih = st.multiselect("🔧 Pilih tipe semen yang ingin diubah nilai Clinker Factor-nya:", df["Cement type"].tolist())
    cf_baru_dict = {}
    if semen_dipilih:
        st.subheader("✏️ Masukkan Clinker Factor Baru untuk Setiap Tipe Semen:")
        for semen in semen_dipilih:
            default_val = float(df[df["Cement type"] == semen]["Clinker Factor (%)"])
            cf_input = st.number_input(f"{semen} (CF Baru %):", min_value=0.0, max_value=100.0, value=round(default_val, 2))
            cf_baru_dict[semen] = cf_input

    if cf_baru_dict:
        df_result = df.copy()
        for semen, cf_new in cf_baru_dict.items():
            idx = df_result[df_result["Cement type"] == semen].index[0]
            prod = df_result.loc[idx, "Cement Production (ton)"]
            df_result.at[idx, "Clinker Factor (%)"] = cf_new
            df_result.at[idx, "Clinker Consumption (ton)"] = prod * cf_new / 100

        total_clinker_baru = df_result["Clinker Consumption (ton)"].sum()
        cf_konsolidasi_baru = total_clinker_baru / total_cement * 100

        st.subheader("📋 Kondisi Sebelum")
        st.dataframe(df[df["Cement type"].isin(semen_dipilih)])

        st.subheader("📊 Kondisi Setelah")
        st.dataframe(df_result[df_result["Cement type"].isin(semen_dipilih)])

        st.success(f"✅ **Clinker Factor Konsolidasi Setelah Simulasi: {cf_konsolidasi_baru:.2f}%**")